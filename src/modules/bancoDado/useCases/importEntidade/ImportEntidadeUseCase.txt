import csvParse from "csv-parse";
import fs from "fs";
import { IEntidadesRepository } from ../repositories/interface/IEntidadesRepository";

interface IImportEntidade {
    column1: string;
    column2: string;
}


@injectable()
class ImportEntidadeUseCase { 
    constructor(
        @inject("EntidadesRepository")
        private entidadesRepository: IEntidadesRepository) {}

    loadEntidade(file: Express.Multer.File): Promise<IImportEntidade[]> {
        return new Promise((resolve, reject ) => {
                 
        const stream = fs.createReadStream(file.path);

        const entidade: IImportEntidade[] = [];

        const parseFile = csvParse();

        stream.pipe(parseFile);

        parseFile.on("data", async (line) => {
            const[column1, column2] = line;
            entidade.push({
                column1,
                column2,
            });
        })
        .on("end", () => {
            fs.promises.unlink(file.path);
            resolve(entidades)
        })
        .on("error", (err) => {
            reject(err);
        });
        });
    }    

    async execute( file: Express.Multer.File ): Promise<void> {
        const entidades = await this.loadEntidade(file);
        
        entidades.map(async (entidade) => {
          const { column1, column2 } = entidade;

          const existEntidade = await this.entidadesRepository.findByName(column1);

          if(!existEntidade) {
            await this.entidadesRepository.create({
                column1, column2,
            });
          }

        })
    }
}

export { ImportEntidadeUseCase };